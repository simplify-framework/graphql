enum GraphQLEngineType { FARGATE LAMBDA KUBERNETES }
enum AuthorizationMode { SIGV4 COGNITO NONE }
enum GraphQLSourceType { TABLE_STORAGE BLOB_STORAGE EVENT_STREAM NONE }
enum GraphQLEventType { EVENT_RULE DATA_SOURCE USER_EVENT }
enum GraphQLDataAccess { READ_ONLY READ_WRITE WRITE_ONLY NONE }

input GraphQLOptions { 
    AuthMode: AuthorizationMode
    AuthorizationId: String
    ApiKey: Boolean
    BurstLimit: Int
    RateLimit: Int 
    QuotaLimit: Int
    QuotaUnit: String
}

input GraphQLDataIndex {
    Name: String
    Type: String
}

input FunctionInput {
    Name: String
    Policy: String
    Runtime: String
    Template: String
}

input ChainInput {
    Run: FunctionInput,
    Next: String
    Other: String
    Retry: Int
}

directive @GraphQLFunctionSet(
    Name: String
    Chains: [ChainInput]
) on FIELD_DEFINITION

directive @GraphQLFunction(
    Name: String
    Policy: String
    Runtime: String
    Template: String
    Chains: [ChainInput]
) on OBJECT | FIELD_DEFINITION

directive @GraphQLEndpoint (
    Path: String!
    Options: GraphQLOptions
) on FIELD_DEFINITION

directive @GraphQLServer (
    Name: String!
    Path: String
    Engine: GraphQLEngineType
    Region: String
    Profile: String
    Options: GraphQLOptions
) on OBJECT

directive @GraphQLEvent (
    Name: String!
    Value: String
    Source: GraphQLEventType
) on OBJECT

directive @GraphQLDataSource (
    Name: GraphQLSourceType!
    Access: GraphQLDataAccess
    Indexes: [GraphQLDataIndex]
) on OBJECT

# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.
# This "Book" type defines the queryable fields for every book in our data source.
type Book
    @GraphQLDataSource(Type: TABLE_STORAGE Name: "starwarsBookTable" Indexes: [{ Name: "title", Type: "String" }])
    @GraphQLEvent(
        Function: "onBookSchedule"
        Type: EVENT_RULE
        Name: "scheduleOnBookEvent"
        Value: "every(10 mins)"
        Access: READ_ONLY
    ) {
    title: String
    author: Author!
}

type Author
    @GraphQLDataSource(Type: BLOB_STORAGE Name: "starwarsAuthorStorage" Indexes: [{ Name: "name", Type: "String" }])
    @GraphQLEvent(
        Function: "onAuthorSchedule"
        Type: TABLE_STORAGE
        Name: "starwarsBookTable"
        Value: "UPDATE|CREATE"
        Access: READ_WRITE
    ) {
    name: String!
}

input AuthorInput {
    name: String!
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query
    @GraphQLServer(Name: "graphApiGatewayQuery", Engine: FARGATE) {
    listBooks: [Book]
        @GraphQLEndpoint(Path: "/query", Options: { AuthMode: NONE ApiKey: false })
        @GraphQLFunction(Name: "listBookFunction")
    getBook(title: String): Book
        @GraphQLEndpoint(Path: "/query", Options: { AuthMode: NONE ApiKey: false })
        @GraphQLFunction(Name: "getBookFunction")
}

type Mutation
    @GraphQLServer(Name: "graphApiGatewayMutation", Engine: LAMBDA) {
    addBook(title: String, author: AuthorInput): [Book]
        @GraphQLEndpoint(Path: "/book/admin", Options: { AuthMode: SIGV4 ApiKey: true })
        @GraphQLFunctionSet(Name: "addBookFunctionSet", Chains: [
            { Run: { Name: "checkBookExisted" }, Next: "addNewBook", Other: "doneNewBook", Retry: 3 }
            { Run: { Name: "addNewBook" }, Next: "doneNewBook", Other: "errorNewBook"  }
            { Run: { Name: "doneNewBook" }, Next: "DONE", Other: "DONE"  }
            { Run: { Name: "errorNewBook" }, Next: "DONE", Other: "DONE"  }
        ])
    deleteBook(title: String, author: AuthorInput): [Book]
        @GraphQLEndpoint(Path: "/book/admin", Options: { AuthMode: SIGV4 ApiKey: true })
        @GraphQLFunction(Name: "deleteBookFunction")
    readBook(title: String, author: AuthorInput): [Book]
        @GraphQLEndpoint(Path: "/book/user", Options: { AuthMode: COGNITO })
        @GraphQLFunction(Name: "readBookFunction", Chains: [
            { Run: { Name: "checkBookPaid" }, Next: "readNewBook", Other: "errorPaidBook" }
            { Run: { Name: "readNewBook" }, Next: "doneReadBook", Other: "DONE"  }
            { Run: { Name: "doneReadBook" }, Next: "DONE", Other: "DONE"  }
            { Run: { Name: "errorPaidBook" }, Next: "DONE", Other: "DONE"  }
        ])
    likeBook(title: String, author: AuthorInput): [Book]
        @GraphQLEndpoint(Path: "/book/user", Options: { AuthMode: COGNITO })
        @GraphQLFunction(Name: "readBookFunction")
}