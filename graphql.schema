enum GraphQLEngineType { FARGATE LAMBDA KUBERNETES }
enum AuthorizationMode { SIGV4 COGNITO NONE }
enum GraphQLSourceType { DYNAMODB MONGODB STORAGE NONE }
enum GraphQLCacheType { INDEXES STREAM NONE }

input GraphQLOptions { 
    AuthMode: AuthorizationMode
    AuthorizationId: String
    EnableApiKey: Boolean
    BurstLimit: Int
    RateLimit: Int 
    QuotaLimit: Int
    QuotaUnit: String
}

input FunctionInput {
    Name: String
    Policy: String
    Runtime: String
    Template: String
}

input ChainInput {
    Run: FunctionInput,
    Next: String
    Fallback: String
    Retry: Int
}

directive @GraphQLChains(
    Name: String
    Chains: [ChainInput]
) on FIELD_DEFINITION

directive @GraphQLFunction(
    Name: String
    Policy: String
    Runtime: String
    Template: String
    Chains: [ChainInput]
) on OBJECT | FIELD_DEFINITION

directive @GraphQLEndpoint (
    Name: String!
    Engine: GraphQLEngineType
    Region: String
    Profile: String
    Options: GraphQLOptions
) on OBJECT

directive @GraphQLDataSource (
    Name: String!
    Type: GraphQLSourceType
    Cache: GraphQLCacheType
)

# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.
# This "Book" type defines the queryable fields for every book in our data source.
type Book @GraphQLDataSource(
    Name: "starwarsBookTable"
    Type: DYNAMODB
    Cache: INDEXES
) {
    title: String
    author: Author!
}

type Author @GraphQLDataSource(
    Name: "starwarsAuthorStorage"
    Type: STORAGE
    Cache: STREAM
) {
    name: String!
}

input AuthorInput {
    name: String!
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).
type Query @GraphQLEndpoint(Name: "graphApiGatewayQuery", Engine: FARGATE) {
    listBooks: [Book] @GraphQLFunction(Name: "listBookFunction")
    getBook(title: String): Book @GraphQLFunction(Name: "getBookFunction")
}

type Mutation 
@GraphQLEndpoint(Name: "graphApiGatewayMutation", Engine: LAMBDA)
@GraphQLFunction(Name: "genericAuthFunction", Runtime: "nodejs12.x") {
    addBook(title: String, author: AuthorInput): [Book]
        @GraphQLChains(Name: "addBookChain", Chains: [
            { Run: { Name: "checkBookExisted" }, Next: "addNewBook", Fallback: "doneBook", Retry: 3 }
            { Run: { Name: "addNewBook" }, Next: "doneBook", Fallback: "errorBook"  }
            { Run: { Name: "doneBook" }, Next: "NONE", Fallback: "NONE"  }
            { Run: { Name: "errorBook" }, Next: "NONE", Fallback: "NONE"  }
        ])
    remBook(title: String, author: AuthorInput): [Book]
        @GraphQLFunction(Name: "remBookFunction", Chains: [
            { Run: { Name: "checkBookExisted" }, Next: "remNewBook", Fallback: "doneBook" }
            { Run: { Name: "remNewBook" }, Next: "doneBook", Fallback: "errorBook"  }
            { Run: { Name: "doneBook" }, Next: "NONE", Fallback: "NONE"  }
            { Run: { Name: "errorBook" }, Next: "NONE", Fallback: "NONE"  }
        ])
}